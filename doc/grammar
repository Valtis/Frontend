Notes:
-e stands for epsilon
-Lowercase text are terminals, uppercase are nonterminals 
-whitespace is non-significant
-this is work in progress and is expanded as needed
-function return type is considered to be 'void' if no return type is specified


S -> FUNCTION S | e

FUNCTION -> fn FUNCTION_DECLARATION BLOCK

FUNCTION_DECLARATION -> identifier(FUNCTION_PARAMETERS) OPTIONAL_RETURN_TYPE

FUNCTION_PARAMETERS -> e | FUNCTION_PARAMETER_LIST

FUNCTION_PARAMETER_LIST -> FUNCTION_PARAMETER ADDITIONAL_PARAMETERS

ADDITIONAL_PARAMETERS -> , FUNCTION_PARAMETER ADDITIONAL_PARAMETERS | e

FUNCTION_PARAMETER -> identifier : TYPE

OPTIONAL_RETURN_TYPE : TYPE | e

BLOCK -> { STATEMENTS }

STATEMENTS -> STATEMENT; STATEMENTS | e

STATEMENT -> VARIABLE_DECLARATION 
	     | BLOCK
		 | VARIABLE_ASSIGNMENT
		 | FUNCTION_CALL
		 | FOR_LOOP

VARIABLE_DECLARATION -> let identifier : TYPE = EXPRESSION;

VARIABLE_ASSIGNMENT -> identifier = EXPRESSION;

FUNCTION_CALL -> identifier(OPTIONAL_FUNCTION_CALL_ARGUMENTS);

OPTIONAL_FUNCTION_CALL_ARGUMENTS -> FUNCTION_CALL_ARGUMENTS | e

FUNCTION_CALL_ARGUMENTS -> EXPRESSION ADDITIONAL_FUNCTION_CALL_ARGUMENTS 
                         
ADDITIONAL_FUNCTION_CALL_ARGUMENTS -> , EXPRESSION | e

FOR_LOOP -> for (OPTIONAL_STATEMENT; OPTIONAL_STATEMENT; OPTIONAL_STATEMENT) BLOCK

OPTIONAL_STATEMENT -> STATEMENT | e

EXPRESSION -> E2 EQUALITY_EXPRESSION

EQUALITY_EXPRESSION -> == E2 EQUALITY_EXPRESSION | e

E2 -> E3 LESS_MORE_EXPRESSION

LESS_MORE_EXPRESSION -> >= E3 LESS_MORE_EXPRESSION
                      | <= E3 LESS_MORE_EXPRESSION
					  | > E3 LESS_MORE_EXPRESSION
					  | < E3 LESS_MORE_EXPRESSION
					  | e

E3 -> TERM PLUS_MINUS_EXPRESSION

PLUS_MINUS_EXPRESSION ->  + TERM PLUS_MINUS_EXPRESSION
		        | - TERM PLUS_MINUS_EXPRESSION
                        | e

TERM -> FACTOR MULT_DIV_TERM

MULT_DIV_TERM -> * FACTOR MULT_DIV_TERM
               | / FACTOR MULT_DIV_TERM
               | e

FACTOR -> ( EXPRESSION ) 
        | identifier 
        | CONSTANT_VALUE


TYPE -> int_type
      | float_type
      | double_type
      | boolean_type
      | string_type 
	  | void_type

CONSTANT_VALUE -> integer_token
                | float_token
                | double_token
                | boolean_token
                | string_token  
				

	note on CONSTANT_VALUE: for numbers, +/- are valid start tokens (eg. "+" token followed by a int/float/double would be accepted)


Error recovery

On error, parser should emit a diagnostic message and skip to next valid same level construct and continue parsing.




