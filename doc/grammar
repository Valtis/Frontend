Notes:
-e stands for epsilon
-Lowercase text are terminals, uppercase are nonterminals 
-whitespace is non-significant
-this is work in progress and is expanded as needed


S -> FUNCTION S | e

FUNCTION -> fn PARAM_LIST BLOCK

PARAM_LIST -> ( OPT_FUNCTION_PARAMS )

OPT_FUNCTION_PARAMS -> FUNCTION_PARAMS 
                     | e

FUNCTION_PARAMS -> FUNCTION_PARAM 
                 | FUNCTION_PARAM, FUNCTION_PARAMS 
                 
FUNCTION_PARAM -> identifier : TYPE

BLOCK -> { STATEMENTS }

STATEMENTS -> STATEMENT; STATEMENTS | e

STATEMENT -> VARIABLE_DECLARATION 
	     | BLOCK

VARIABLE_DECLARATION -> let identifier : TYPE = EXPRESSION

EXPRESSION = CONSTANT_VALUE


TYPE -> int_type
      | float_type
      | double_type
      | boolean_type
      | string_type 

CONSTANT_VALUE = integer_token
               | float_token
               | double_token
               | boolean_token
               | string_token  



Error recovery

On error, parser should emit a diagnostic message and skip to next valid same level construct and continue parsing.




